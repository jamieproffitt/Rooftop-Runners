go.property("angular_velocity", 3)
FRICTION = 20
JUMP_VELOCITY =  500
GRAVITY = 10

function init(self)
	self.correction = vmath.vector3()
	self.lastRotation = -1
	self.rotationCount = 0
	self.velocity = vmath.vector3(0, 0, 0)
	self.canJump = true
	self.jumping = false
	self.jumpCount = 0
	self.safePosition = go.get_position()
	self.follow = true
	msg.post("#", "acquire_input_focus") 
	self.debug = false
	self.jumpdelay = 0
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function handleRot2(self, dt)
	rotation = go.get_rotation()
	if self.rotating == hash("left") then
		rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * 1 * dt)
	elseif self.rotating == hash("right") then
		rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * -1 * dt)
	end
	return rotation
end

function handleRot(self, rotation, dt)
	if self.rotating == hash("left") then
		if self.rotationCount < 25 then
			self.rotationCount = self.rotationCount + 1
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * 1 * dt)
		elseif self.onGround == false then
			self.rotationCount = 0
			self.lastRotation = hash("none")
		end
	elseif self.rotating == hash("right") then
		if self.rotationCount < 25 then
			self.rotationCount = self.rotationCount + 1
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * -1 * dt)
		elseif self.onGround == false then
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * -1 * dt)
		end
	elseif self.lastRotation == hash("left") then
		print("attempt fix1")
		if rotation.z > 0 and self.onGround == true then
			print("fix rotate1")
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * -1 * dt)
		elseif self.onGround == true then
			self.lastRotation = hash("none")
			self.rotationCount = 0
		else
			self.lastRotation = hash("none")
			self.rotationCount = 0
		end
	elseif self.lastRotation == hash("right") then
		if rotation.z < 0 and self.onGround == true then
			rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * 1 * dt)
			print("fix rotate")
		elseif self.onGround == true then
			self.lastRotation = hash("none")
			self.rotationCount = 0
		end
	end
	return rotation
end

local function clamp(type, v, min, max)
	if type == y then
		if v < min then return min 
		elseif v > max then return max 
		else return v end
	else
		if v < 0 then return 0 end
	end
end

function checkFall(self)
	local pos = go.get_position()
	if pos.y < -500 then
		go.set_position(self.safePosition)
	end
end

function handlejump(self, dt)
	local rotation = go.get_rotation()
	local direction = vmath.vector3(1,0,0)
	local updateddirection = vmath.rotate(rotation, direction)
	local angle = math.deg(math.atan2(-updateddirection.y, updateddirection.x))
	if self.jumping == true then
		if angle == 0 then
			self.velocity.y = self.velocity.y + 500 * dt
			self.jumping = false
			self.canJump = false
		elseif angle > 0 then
			angle = 90 - angle
			angle = math.rad(angle)
			print("1y: ",self.velocity.y,"1x: ",self.velocity.x, angle, "right")
			self.velocity.y = self.velocity.y + (math.sin(angle) * 10) 
			self.velocity.x = self.velocity.x + (math.cos(angle) * 10)
			print("ySin: ",(math.sin(angle)*20),"xCos: ",(math.cos(angle)*20))
			print("2y: ",self.velocity.y,"2x: ",self.velocity.x, angle)
			self.jumping = false
			self.canJump = false
			self.debug = false
		elseif angle < 0 then
			print("Jum2")
			angle = -angle
			angle = 90 - angle
			angle = math.rad(angle)
			self.velocity.y = self.velocity.y + (math.sin(angle) * 10)
			self.velocity.x = self.velocity.x - (math.cos(angle) * 10)
			print("y: ",self.velocity.y,"x: ",self.velocity.x, angle)
			self.jumping = false
			self.canJump = false
			self.debug = false
		end
	end
end

function update(self, dt) 
	self.velocity.y = self.velocity.y - GRAVITY * dt
	if self.velocity.x < 0 and self.onGround == true then 
		self.velocity.x = self.velocity.x + FRICTION * dt
	elseif self.velocity.x > 0 and self.onGround == true then
		self.velocity.x = self.velocity.x - FRICTION * dt 
	end
	checkFall(self)
	rotation = handleRot2(self, dt)
	handlejump(self, dt)
	local pos = go.get_position()
	pos = pos + self.velocity 
	go.set_position(pos)
	go.set_rotation(rotation)
	self.correction = vmath.vector3()
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("default") then
			self.canJump = true
			self.onGround = true
		else
			self.onGround = false
		end
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
				self.velocity.y = 0
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("player1_left") then
		if action.pressed then
			msg.post("#sprite", "play_animation", {id = hash("player_left")})
			self.rotating = hash("left")
		elseif action.released then
			self.rotating = nil
			self.lastRotation = hash("left")
		end
	end
	if action_id == hash("player1_right") then
		if action.pressed then
			msg.post("#sprite", "play_animation", {id = hash("player_right")})
			self.rotating = hash("right")
		elseif action.released then
			self.rotating = nil
			self.lastRotation = hash("right")
		end
	end
	if action_id == hash("player1_jump") then
		if action.pressed and self.canJump == true then
			self.jumping = true
			self.onGround = false
		end
	end
	if self.follow then
		msg.post("camera", "follow")
	else
		msg.post("camera", "unfollow")
	end
	if action_id == hash("debug") then
		local rotation = go.get_rotation()
		local direction = vmath.vector3(1,0,0)
		local updateddirection = vmath.rotate(rotation, direction)
		local angle = math.deg(math.atan2(-updateddirection.y, updateddirection.x))
		print("angle: ",angle," x vel: ",self.velocity.x," y vel: ",self.velocity.y)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
